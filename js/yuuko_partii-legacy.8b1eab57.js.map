{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/pages/eris/partii/App.vue","webpack:///./src/pages/eris/partii/App.vue?9a83","webpack:///./src/pages/eris/partii/main.js","webpack:///./src/pages/eris/partii/App.vue?810c"],"names":["webpackJsonpCallback","data","moduleId","chunkId","chunkIds","moreModules","executeModules","i","resolves","length","Object","prototype","hasOwnProperty","call","installedChunks","push","modules","parentJsonpFunction","shift","deferredModules","apply","checkDeferredModules","result","deferredModule","fulfilled","j","depId","splice","__webpack_require__","s","installedModules","exports","module","l","m","c","d","name","getter","o","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","p","jsonpArray","window","oldJsonpFunction","slice","id","render","createApp","App","mount"],"mappings":"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","file":"js/yuuko_partii-legacy.8b1eab57.js","sourcesContent":[" \t// install a JSONP callback for chunk loading\n \tfunction webpackJsonpCallback(data) {\n \t\tvar chunkIds = data[0];\n \t\tvar moreModules = data[1];\n \t\tvar executeModules = data[2];\n\n \t\t// add \"moreModules\" to the modules object,\n \t\t// then flag all \"chunkIds\" as loaded and fire callback\n \t\tvar moduleId, chunkId, i = 0, resolves = [];\n \t\tfor(;i < chunkIds.length; i++) {\n \t\t\tchunkId = chunkIds[i];\n \t\t\tif(Object.prototype.hasOwnProperty.call(installedChunks, chunkId) && installedChunks[chunkId]) {\n \t\t\t\tresolves.push(installedChunks[chunkId][0]);\n \t\t\t}\n \t\t\tinstalledChunks[chunkId] = 0;\n \t\t}\n \t\tfor(moduleId in moreModules) {\n \t\t\tif(Object.prototype.hasOwnProperty.call(moreModules, moduleId)) {\n \t\t\t\tmodules[moduleId] = moreModules[moduleId];\n \t\t\t}\n \t\t}\n \t\tif(parentJsonpFunction) parentJsonpFunction(data);\n\n \t\twhile(resolves.length) {\n \t\t\tresolves.shift()();\n \t\t}\n\n \t\t// add entry modules from loaded chunk to deferred list\n \t\tdeferredModules.push.apply(deferredModules, executeModules || []);\n\n \t\t// run deferred modules when all chunks ready\n \t\treturn checkDeferredModules();\n \t};\n \tfunction checkDeferredModules() {\n \t\tvar result;\n \t\tfor(var i = 0; i < deferredModules.length; i++) {\n \t\t\tvar deferredModule = deferredModules[i];\n \t\t\tvar fulfilled = true;\n \t\t\tfor(var j = 1; j < deferredModule.length; j++) {\n \t\t\t\tvar depId = deferredModule[j];\n \t\t\t\tif(installedChunks[depId] !== 0) fulfilled = false;\n \t\t\t}\n \t\t\tif(fulfilled) {\n \t\t\t\tdeferredModules.splice(i--, 1);\n \t\t\t\tresult = __webpack_require__(__webpack_require__.s = deferredModule[0]);\n \t\t\t}\n \t\t}\n\n \t\treturn result;\n \t}\n\n \t// The module cache\n \tvar installedModules = {};\n\n \t// object to store loaded and loading chunks\n \t// undefined = chunk not loaded, null = chunk preloaded/prefetched\n \t// Promise = chunk loading, 0 = chunk loaded\n \tvar installedChunks = {\n \t\t\"yuuko_partii\": 0\n \t};\n\n \tvar deferredModules = [];\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \tvar jsonpArray = window[\"webpackJsonp\"] = window[\"webpackJsonp\"] || [];\n \tvar oldJsonpFunction = jsonpArray.push.bind(jsonpArray);\n \tjsonpArray.push = webpackJsonpCallback;\n \tjsonpArray = jsonpArray.slice();\n \tfor(var i = 0; i < jsonpArray.length; i++) webpackJsonpCallback(jsonpArray[i]);\n \tvar parentJsonpFunction = oldJsonpFunction;\n\n\n \t// add entry module to deferred list\n \tdeferredModules.push([4,\"chunk-vendors\"]);\n \t// run deferred modules when ready\n \treturn checkDeferredModules();\n","<template>\n  <div id=\"app\">\n    <div class=\"markdown-body\">\n      <h1>Eris &amp; Yuuko: Part II: Embeds</h1>\n\n      <p>If you want to skip the next part, click <a href=\"#cmd\">here</a>.</p>\n      <h1 id=\"code-from-previous-post\">\n        Code from Previous Post\n      </h1>\n      <p>\n        As promised, I will be putting the code here for those who just want to grab and go:\n        Your project directory:\n      </p>\n      <pre><code class=\"lang-bash\">│   <span class=\"hljs-selector-class\">.env</span>\n│   index<span class=\"hljs-selector-class\">.js</span>\n│   package-lock<span class=\"hljs-selector-class\">.json</span>\n│   package<span class=\"hljs-selector-class\">.json</span>\n│\n├───commands\n│       owo<span class=\"hljs-selector-class\">.js</span>\n│\n├───events\n│       ready<span class=\"hljs-selector-class\">.js</span>\n│\n└───node_modules\n    │   ...\n</code></pre>\n      <p><code>./.env</code></p>\n      <pre><code><span class=\"hljs-attr\">TOKEN</span>=&lt;your-token-here&gt;\n<span class=\"hljs-attr\">PREFIX</span>=&lt;your-bot-prefix&gt;\n</code></pre><p><code>./index.js</code></p>\n      <pre><code class=\"lang-js\"><span class=\"hljs-keyword\">const</span> { Client } = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'yuuko'</span>);\n<span class=\"hljs-keyword\">const</span> path = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'path'</span>);\n<span class=\"hljs-keyword\">const</span> dotenv = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'dotenv'</span>);\n<span class=\"hljs-keyword\">var</span> env = dotenv.config();\nenv = process.env;\n\n<span class=\"hljs-keyword\">const</span> bot = <span class=\"hljs-keyword\">new</span> Client({\n    <span class=\"hljs-attr\">token</span>: env.TOKEN,\n    <span class=\"hljs-attr\">prefix</span>: env.PREFIX,\n    <span class=\"hljs-attr\">ignoreBots</span>: <span class=\"hljs-literal\">true</span>,\n});\n\nbot.extendContext({\n    <span class=\"hljs-attr\">variableOne</span>: <span class=\"hljs-string\">'Variable number 1!'</span>,\n});\nbot.editStatus(<span class=\"hljs-string\">'dnd'</span>); <span class=\"hljs-comment\">// edits bot status</span>\n\nbot.on(<span class=\"hljs-string\">'error'</span>, (err) =&gt; {\n    <span class=\"hljs-built_in\">console</span>.error(err);\n});\n\nbot.globalCommandRequirements = {\n    <span class=\"hljs-attr\">guildOnly</span>: <span class=\"hljs-literal\">true</span>,\n};\n\nbot\n    .addDir(path.join(__dirname, <span class=\"hljs-string\">'commands'</span>))\n    .addDir(path.join(__dirname, <span class=\"hljs-string\">'events'</span>))\n    .connect();\n</code></pre>\n      <p>\n        <code>./package.json</code> + <code>./package-lock.json</code>\n        I will not be showing this, but you should have <code>yuuko</code>, <code>eris</code>, and <code>dotenv</code> installed.\n        <code>./commands/owo.js</code>\n      </p>\n      <pre><code class=\"lang-js\">const { Command } = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'yuuko'</span>);\n<span class=\"hljs-built_in\">module</span>.exports = <span class=\"hljs-keyword\">new</span> Command(<span class=\"hljs-string\">'owo'</span>, <span class=\"hljs-function\"><span class=\"hljs-params\">(message, args, context)</span> =&gt;</span> {\n  message.channel.createMessage(<span class=\"hljs-string\">'OwO'</span>);\n});\n</code></pre>\n      <p><code>./events/ready.js</code></p>\n      <pre><code class=\"lang-js\">const { EventListener } = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'yuuko'</span>);\n<span class=\"hljs-built_in\">module</span>.exports = <span class=\"hljs-keyword\">new</span> EventListener(<span class=\"hljs-string\">'ready'</span>, <span class=\"hljs-function\"><span class=\"hljs-params\">({client})</span> =&gt;</span> {\n  <span class=\"hljs-built_in\">console</span>.log(`<span class=\"javascript\">Logged <span class=\"hljs-keyword\">in</span> <span class=\"hljs-keyword\">as</span> ${client.user.usename}</span>`);\n});\n</code></pre>\n      <p>That should be all the code for now.</p>\n      <h1 id=\"the-meme-command-a-name-cmd-a-\">\n        The <code>Meme</code> Command <a name=\"cmd\" />\n      </h1>\n      <p>\n        Now, for the <code>Meme</code> command! For this, we will need to get the memes from reddit. For that, we will be using <code>got</code> to get the JSON from <code>https://www.reddit.com/r/memes/random/.json</code>.\n        Install <code>got</code> first:\n      </p>\n      <pre><code class=\"lang-bash\">npm <span class=\"hljs-selector-tag\">i</span> got --save\n</code></pre>\n      <p>\n        Create a file in <code>./commands</code> and name it <code>meme.js</code>.\n        Put the following code inside (I will be explaining it later):\n      </p>\n      <pre><code class=\"lang-js\"><span class=\"hljs-keyword\">const</span> { Command } = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'yuuko'</span>);\n<span class=\"hljs-keyword\">const</span> got = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'got'</span>);\n<span class=\"hljs-built_in\">module</span>.exports = <span class=\"hljs-keyword\">new</span> Command(<span class=\"hljs-string\">'meme'</span>, (message) =&gt; {\n    got(<span class=\"hljs-string\">'https://www.reddit.com/r/memes/random/.json'</span>)\n        .then(<span class=\"hljs-function\">(<span class=\"hljs-params\">response</span>) =&gt;</span> {\n            <span class=\"hljs-keyword\">const</span> [list] = <span class=\"hljs-built_in\">JSON</span>.parse(response.body);\n            <span class=\"hljs-keyword\">const</span> [post] = list.data.children;\n\n            <span class=\"hljs-keyword\">const</span> permalink = post.data.permalink;\n            <span class=\"hljs-keyword\">const</span> memeUrl = <span class=\"hljs-string\">`https://reddit.com<span class=\"hljs-subst\">${permalink}</span>`</span>;\n            <span class=\"hljs-keyword\">const</span> memeImage = post.data.url;\n            <span class=\"hljs-keyword\">const</span> memeTitle = post.data.title;\n            <span class=\"hljs-keyword\">const</span> memeUpvotes = post.data.ups;\n            <span class=\"hljs-keyword\">const</span> memeNumComments = post.data.num_comments;\n            message.channel.createMessage({\n                <span class=\"hljs-attr\">embed</span>: {\n                    <span class=\"hljs-attr\">title</span>: memeTitle,\n                    <span class=\"hljs-attr\">url</span>: memeUrl,\n                    <span class=\"hljs-attr\">image</span>: {\n                        <span class=\"hljs-attr\">url</span>: memeImage,\n                    },\n                    <span class=\"hljs-attr\">color</span>: <span class=\"hljs-number\">15267908</span>,\n                    <span class=\"hljs-attr\">footer</span>: {\n                        <span class=\"hljs-attr\">text</span>: <span class=\"hljs-string\">`👍 <span class=\"hljs-subst\">${memeUpvotes}</span> 💬 <span class=\"hljs-subst\">${memeNumComments}</span>`</span>,\n                    },\n                },\n            });\n        })\n        .catch(<span class=\"hljs-function\"><span class=\"hljs-params\">err</span> =&gt;</span> {\n            <span class=\"hljs-built_in\">console</span>.error(err);\n        });\n});\n</code></pre>\n      <p>Now start the project by navigating to the root folder of the project and running</p>\n      <pre><code class=\"lang-bash\"><span class=\"hljs-keyword\">node</span> <span class=\"hljs-title\">index</span>.js\n</code></pre>\n      <p>or if you have <code>nodemon</code> installed</p>\n      <pre><code class=\"lang-bash\">nodemon <span class=\"hljs-keyword\">index</span>.js\n</code></pre>\n      <p>Let me break the code up into smaller pieces to explain it.</p>\n      <pre><code class=\"lang-js\">const { Command } = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'yuuko'</span>);\nconst got = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'got'</span>);\n<span class=\"hljs-built_in\">module</span>.exports = <span class=\"hljs-keyword\">new</span> Command(<span class=\"hljs-string\">'meme'</span>, <span class=\"hljs-function\"><span class=\"hljs-params\">(message)</span> =&gt;</span> {\n  <span class=\"hljs-regexp\">//</span> code here\n})\n</code></pre>\n      <p>So, we first import the modules as usual, and create a command as we did before. Easy.</p>\n      <pre><code class=\"lang-js\">got(<span class=\"hljs-string\">'https://www.reddit.com/r/memes/random/.json'</span>).<span class=\"hljs-keyword\">then</span>(<span class=\"hljs-function\"><span class=\"hljs-params\">(response)</span> =&gt;</span> {\n  <span class=\"hljs-regexp\">//</span> code here\n}).<span class=\"hljs-keyword\">catch</span>(err =&gt; {\n            <span class=\"hljs-built_in\">console</span>.error(err);\n});\n</code></pre>\n      <p>Now, we use <code>got</code> to get the JSON from reddit (the subreddit <code>r/memes</code> actually), and save the response as the <code>response</code> variable. Note that we are using Promises here, thus the <code>.then().catch()</code> in the code. You can, however, use the <code>async/await</code> in ES6.</p>\n      <p>Good?</p>\n      <pre><code class=\"lang-js\"><span class=\"hljs-keyword\">const</span> [<span class=\"hljs-keyword\">list</span>] = JSON.<span class=\"hljs-keyword\">parse</span>(response.body);\n<span class=\"hljs-keyword\">const</span> [<span class=\"hljs-keyword\">post</span>] = <span class=\"hljs-keyword\">list</span>.data.children;\n</code></pre>\n      <p>Now, we parse the response body by using <code>JSON.parse</code> (Note: You will get an error if you just use <code>JSON.parse(response)</code>), and get the information about the reddit post which we saved inside the <code>post</code> variable. Understand? Excellent.</p>\n      <pre><code class=\"lang-js\"><span class=\"hljs-attribute\">const permalink</span> = post.data.permalink;\n<span class=\"hljs-attribute\">const memeUrl</span> = `https://reddit.com${permalink}`;\n<span class=\"hljs-attribute\">const memeImage</span> = post.data.url;\n<span class=\"hljs-attribute\">const memeTitle</span> = post.data.title;\n<span class=\"hljs-attribute\">const memeUpvotes</span> = post.data.ups;\n<span class=\"hljs-attribute\">const memeNumComments</span> = post.data.num_comments;\n</code></pre>\n      <p>Now we save the post url as <code>memeUrl</code>, the meme image url as <code>memeImage</code>, the meme title as <code>memeTitle</code>, the number of meme upvotes as <code>memeUpvotes</code>, and the number of comments as <code>memeNumComments</code>.</p>\n      <pre><code class=\"lang-js\"><span class=\"hljs-selector-tag\">message</span><span class=\"hljs-selector-class\">.channel</span><span class=\"hljs-selector-class\">.createMessage</span>({\n                <span class=\"hljs-attribute\">embed</span>: {\n                    <span class=\"hljs-attribute\">title</span>: memeTitle,\n                    <span class=\"hljs-attribute\">url</span>: memeUrl,\n                    <span class=\"hljs-attribute\">image</span>: {\n                        <span class=\"hljs-attribute\">url</span>: memeImage,\n                    },\n                    <span class=\"hljs-attribute\">color</span>: <span class=\"hljs-number\">15267908</span>,\n                    <span class=\"hljs-attribute\">footer</span>: {\n                        <span class=\"hljs-attribute\">text</span>: <span class=\"hljs-built_in\">`👍 ${memeUpvotes} 💬 ${memeNumComments}`</span>,\n                    },\n                },\n});\n</code></pre>\n      <p>We then send the embed object. That&#39;s the end of it. Easy, right?</p>\n      <h1 id=\"conclusion\">\n        Conclusion\n      </h1>\n      <p>In this post, we used a REST API, and learnt how to send an embed in Eris. For my next post, I will be writing a <code>whois</code> command. See you until next time!</p>\n    </div>\n  </div>\n</template>\n\n<script>\n\nexport default {\n\tname: 'About',\n};\n</script>\n\n<style>\n@import '../../../../def.css';\n</style>\n","import { render } from \"./App.vue?vue&type=template&id=629c3896\"\nimport script from \"./App.vue?vue&type=script&lang=js\"\nexport * from \"./App.vue?vue&type=script&lang=js\"\n\nimport \"./App.vue?vue&type=style&index=0&id=629c3896&lang=css\"\nscript.render = render\n\nexport default script","import { createApp } from 'vue';\nimport App from './App.vue';\n\ncreateApp(App).mount('#app');\n","export * from \"-!../../../../node_modules/mini-css-extract-plugin/dist/loader.js??ref--6-oneOf-1-0!../../../../node_modules/css-loader/dist/cjs.js??ref--6-oneOf-1-1!../../../../node_modules/vue-loader-v16/dist/stylePostLoader.js!../../../../node_modules/postcss-loader/src/index.js??ref--6-oneOf-1-2!../../../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../../../node_modules/vue-loader-v16/dist/index.js??ref--0-1!./App.vue?vue&type=style&index=0&id=629c3896&lang=css\""],"sourceRoot":""}