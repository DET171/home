{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/pages/eris/parti/App.vue","webpack:///./src/pages/eris/parti/App.vue?7ff6","webpack:///./src/pages/eris/parti/main.js","webpack:///./src/pages/eris/parti/App.vue?f961"],"names":["webpackJsonpCallback","data","moduleId","chunkId","chunkIds","moreModules","executeModules","i","resolves","length","Object","prototype","hasOwnProperty","call","installedChunks","push","modules","parentJsonpFunction","shift","deferredModules","apply","checkDeferredModules","result","deferredModule","fulfilled","j","depId","splice","__webpack_require__","s","installedModules","exports","module","l","m","c","d","name","getter","o","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","p","jsonpArray","window","oldJsonpFunction","slice","id","render","createApp","App","mount"],"mappings":"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","file":"js/yuuko_parti-legacy.0bf08967.js","sourcesContent":[" \t// install a JSONP callback for chunk loading\n \tfunction webpackJsonpCallback(data) {\n \t\tvar chunkIds = data[0];\n \t\tvar moreModules = data[1];\n \t\tvar executeModules = data[2];\n\n \t\t// add \"moreModules\" to the modules object,\n \t\t// then flag all \"chunkIds\" as loaded and fire callback\n \t\tvar moduleId, chunkId, i = 0, resolves = [];\n \t\tfor(;i < chunkIds.length; i++) {\n \t\t\tchunkId = chunkIds[i];\n \t\t\tif(Object.prototype.hasOwnProperty.call(installedChunks, chunkId) && installedChunks[chunkId]) {\n \t\t\t\tresolves.push(installedChunks[chunkId][0]);\n \t\t\t}\n \t\t\tinstalledChunks[chunkId] = 0;\n \t\t}\n \t\tfor(moduleId in moreModules) {\n \t\t\tif(Object.prototype.hasOwnProperty.call(moreModules, moduleId)) {\n \t\t\t\tmodules[moduleId] = moreModules[moduleId];\n \t\t\t}\n \t\t}\n \t\tif(parentJsonpFunction) parentJsonpFunction(data);\n\n \t\twhile(resolves.length) {\n \t\t\tresolves.shift()();\n \t\t}\n\n \t\t// add entry modules from loaded chunk to deferred list\n \t\tdeferredModules.push.apply(deferredModules, executeModules || []);\n\n \t\t// run deferred modules when all chunks ready\n \t\treturn checkDeferredModules();\n \t};\n \tfunction checkDeferredModules() {\n \t\tvar result;\n \t\tfor(var i = 0; i < deferredModules.length; i++) {\n \t\t\tvar deferredModule = deferredModules[i];\n \t\t\tvar fulfilled = true;\n \t\t\tfor(var j = 1; j < deferredModule.length; j++) {\n \t\t\t\tvar depId = deferredModule[j];\n \t\t\t\tif(installedChunks[depId] !== 0) fulfilled = false;\n \t\t\t}\n \t\t\tif(fulfilled) {\n \t\t\t\tdeferredModules.splice(i--, 1);\n \t\t\t\tresult = __webpack_require__(__webpack_require__.s = deferredModule[0]);\n \t\t\t}\n \t\t}\n\n \t\treturn result;\n \t}\n\n \t// The module cache\n \tvar installedModules = {};\n\n \t// object to store loaded and loading chunks\n \t// undefined = chunk not loaded, null = chunk preloaded/prefetched\n \t// Promise = chunk loading, 0 = chunk loaded\n \tvar installedChunks = {\n \t\t\"yuuko_parti\": 0\n \t};\n\n \tvar deferredModules = [];\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"/\";\n\n \tvar jsonpArray = window[\"webpackJsonp\"] = window[\"webpackJsonp\"] || [];\n \tvar oldJsonpFunction = jsonpArray.push.bind(jsonpArray);\n \tjsonpArray.push = webpackJsonpCallback;\n \tjsonpArray = jsonpArray.slice();\n \tfor(var i = 0; i < jsonpArray.length; i++) webpackJsonpCallback(jsonpArray[i]);\n \tvar parentJsonpFunction = oldJsonpFunction;\n\n\n \t// add entry module to deferred list\n \tdeferredModules.push([3,\"chunk-vendors\"]);\n \t// run deferred modules when ready\n \treturn checkDeferredModules();\n","<template>\n  <div id=\"app\">\n    <div class=\"markdown-body\">\n      <h1>Eris &amp; Yuuko: Part I: The Basics</h1>\n\n      <h1 id=\"introduction\">\n        Introduction\n      </h1>\n      <p>Hello there, this sentence will mark the beginning of my first ever article released to the public. In this article, I will be writing how to build a Discord bot with <a href=\"https://abal.moe/Eris/\">Eris</a> and <a href=\"https://eritbh.me/yuuko/\">Yuuko</a>.</p>\n      <p>In this tutorial, I will be using the following format for the code:</p>\n      <pre><code class=\"lang-js\">+ <span class=\"hljs-comment\">// This line should be added to your code</span>\n- <span class=\"hljs-comment\">// This line should be removed from your code</span>\n</code></pre>\n      <h1 id=\"prerequisites\">\n        Prerequisites\n      </h1>\n      <ul>\n        <li>A basic knowledge of JavaScript</li>\n        <li>Node.js (v12) and NPM (v7) installed on your machine</li>\n        <li>A basic knowledge of the <a href=\"https://discord.com/developers/docs/intro\">Discord API</a></li>\n      </ul>\n      <h1 id=\"background-info\">\n        Background Info\n      </h1>\n      <p>So, what is Eris exactly?</p>\n      <blockquote>\n        <p>A lightweight NodeJS Discord Library.</p>\n      </blockquote>\n      <p>What is Yuuko, then?</p>\n      <blockquote>\n        <p>A Discord command framework for Javascript and Typescript.</p>\n      </blockquote>\n      <p>I assume that if you&#39;ve ever wanted to make a Discord Bot, you would have at least googled it up. The first and most common answer you&#39;d see is probably &quot;How to build a Discord Bot with Discord.js&quot;. What exactly is the difference between Eris and Discord.js?</p>\n      <h1 id=\"features\">\n        Features\n      </h1>\n      <p>\n        D.js covers 100% of the Discord API while Eris does not. However, covering 100% of the Discord API has its disadvantages.\n        D.js has a larger memory footprint, and when the bot is in many servers, it starts having performance issues. That is why many large bots, like <a href=\"https://dankmemer.lol/\">Dank Memer</a> (The 4th largest Discord Bot), are made using Eris.\n      </p>\n      <p>However, there are some packages on NPM that can help with the functions that Eris lacks, for example, <a href=\"https://www.npmjs.com/package/eris-additions\">Eris Additions</a>. There are even command handlers for Eris on NPM, like <a href=\"https://www.npmjs.com/package/yuuko\">Yuuko</a> and <a href=\"https://www.npmjs.com/package/eris-boiler\">Eris Boiler</a>. For developers moving from D.js to Eris, there is <a href=\"https://www.npmjs.com/package/chariot.js\">Chariot.js</a>.</p>\n      <h1 id=\"getting-started\">\n        Getting started\n      </h1>\n      <p>Now, without further delay, let us dive into the magical world of Discord Bots.</p>\n      <h1 id=\"creating-a-discord-bot-account\">\n        Creating a Discord Bot account\n      </h1>\n      <p>Now, the first thing you need to do is to create a Discord Bot account.</p>\n      <ol>\n        <li>Head over to the <a href=\"https://discord.com/developers/applications\">Discord Applications page</a>.</li>\n        <li>Click the <code>New Application</code> button on the top right corner.</li>\n        <li>Now name your application (You can change it afterwards). Enter the name and hit <code>Create</code>.</li>\n        <li>Now that you have created the application, now you need to create the bot account. Head over to <code>Bot</code> and click on <code>Add Bot</code>, and then click <code>Click on Yes, do it!</code>.</li>\n        <li>Under the <code>TOKEN</code> section, click <code>Copy</code>.</li>\n        <li>Awesome! Now you have your Bot Token!</li>\n      </ol>\n      <p>Last but not least, do remember to invite your bot into your server in order to &quot;talk&quot; to it.</p>\n      <h1 id=\"set-up-your-project\">\n        Set up your project\n      </h1>\n      <ol>\n        <li>\n          <p>Create your project folder and <code>package.json</code>.</p>\n          <pre><code class=\"lang-bash\"><span class=\"hljs-built_in\">mkdir</span> <span class=\"hljs-symbol\">&lt;your-project-name&gt;</span>\n<span class=\"hljs-keyword\">cd</span> <span class=\"hljs-symbol\">&lt;your-project-name&gt;</span>\nnpm init\n</code></pre>\n          <p>Ensure that the <code>main</code> in your <code>package.json</code> is set to <code>index.js</code>.</p>\n        </li>\n        <li>\n          <p>Install the relevant dependencies now.</p>\n          <pre><code class=\"lang-bash\">npm <span class=\"hljs-selector-tag\">i</span> eris yuuko dotenv\n</code></pre>\n          <p>Should you be using a version of NPM below 4.5 <em>(you shouldn&#39;t)</em>, run the following instead:</p>\n          <pre><code class=\"lang-bash\">npm <span class=\"hljs-selector-tag\">i</span> eris yuuko dotenv --save\n</code></pre>\n          <p>Install <code>nodemon</code> as well.</p>\n          <pre><code class=\"lang-bash\">npm <span class=\"hljs-selector-tag\">i</span> -g nodemon\n</code></pre>\n        </li>\n        <li>Create a <code>.env</code> and <code>index.js</code> file, and a <code>commands</code> and <code>events</code> folder.</li>\n      </ol>\n      <h3 id=\"optional-steps\">\n        Optional Steps\n      </h3>\n      <ul>\n        <li>Install <code>bufferutil</code>, <code>zlib-sync</code> or <code>abalabahaha/erlpack</code></li>\n        <li>\n          Install a linter and create the config file<pre><code class=\"lang-bash\">npm i eslint -D\n<span class=\"hljs-comment\"># -D is short for --save-dev</span>\nnpx eslint <span class=\"hljs-comment\">--init</span>\n<span class=\"hljs-comment\"># Just answer the prompts</span>\n</code></pre>\n          That&#39;s about the end of setting up your project!\n          Your project tree should look something like this now:<pre><code>|   .env\n│   index.js\n│   <span class=\"hljs-keyword\">package</span>-lock.json\n│   <span class=\"hljs-keyword\">package</span>.json\n│\n├───commands\n├───events\n└───node_modules\n  │   ...\n</code></pre>\n        </li>\n      </ul>\n      <h1 id=\"now-let-s-start-coding-\">\n        Now, let&#39;s start coding!\n      </h1>\n      <p>Note: The final code will be included at the end :)</p>\n      <p>First, open the project in you favourite text editor, and fill in the <code>.env</code> file with the following:</p>\n      <pre><code><span class=\"hljs-attr\">TOKEN</span>=&lt;your-token-here&gt;\n<span class=\"hljs-attr\">PREFIX</span>=&lt;your-bot-prefix&gt;\n</code></pre><p>\n        Of course, replace <code>&lt;your-token-here&gt;</code> with the Bot token you obtained earlier, and <code>&lt;your-bot-prefix&gt;</code> with your bot prefix.\n        If you do not understand <code>dotenv</code> and <code>.env</code> files,\n        Now that we are no longer concerned with the bot configurations, let us write our basic bot code!\n        Head over to your <code>index.js</code> file, and insert the following at the top to require the packages.\n      </p>\n      <pre><code class=\"lang-js\"><span class=\"hljs-keyword\">const</span> { Client } = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'yuuko'</span>); <span class=\"hljs-comment\">// Imports the Client constructor</span>\n<span class=\"hljs-keyword\">const</span> path = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'path'</span>); <span class=\"hljs-comment\">// For joining paths</span>\n<span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'dotenv'</span>).config(); <span class=\"hljs-comment\">// Imports the variables in the `.env` file</span>\n</code></pre>\n      <p>As you can see, we have imported the <code>Client</code> constructor from <code>Yuuko</code> but not the <code>Command</code> constructor. Why? We will be putting the commands in <code>js</code> files in the <code>command</code> folder, so our <code>index.js</code> file will not be crowded with commands. Neat!</p>\n      <p>We can create a client with the following:</p>\n      <pre><code class=\"lang-js\"><span class=\"hljs-keyword\">const</span> bot = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Client</span>({\n    token: <span class=\"hljs-built_in\">process</span>.env.TOKEN,\n    prefix: <span class=\"hljs-built_in\">process</span>.env.PREFIX,\n    ignoreBots: true,\n});\n</code></pre>\n      <p>\n        The <code>ignoreBots: true</code> in the code tells our bot to ignore all messages sent by other bots.\n        If you want to allow commands to be used in only servers, you can set it using the following:\n      </p>\n      <pre><code class=\"lang-js\"><span class=\"hljs-keyword\">bot.globalCommandRequirements </span>= {\n<span class=\"hljs-symbol\">    guildOnly:</span> true,\n}<span class=\"hljs-comment\">;</span>\n</code></pre>\n      <p>However, if you want to allow commands to be used in only DMs, you can set it using the following:</p>\n      <pre><code class=\"lang-js\"><span class=\"hljs-keyword\">bot.globalCommandRequirements </span>= {\n<span class=\"hljs-symbol\">    dmOnly:</span> true,\n}<span class=\"hljs-comment\">;</span>\n</code></pre>\n      <p>To pass context/variables to the commands in other files, you can set in <code>index.js</code> by doing</p>\n      <pre><code class=\"lang-js\"><span class=\"hljs-selector-tag\">bot</span><span class=\"hljs-selector-class\">.extendContext</span>({\n  <span class=\"hljs-attribute\">variableOne</span>: <span class=\"hljs-string\">'Variable number 1!'</span>,\n});\n</code></pre>\n      <p>The variables set here will be passed to commands and event listeners under <code>context.&lt;variable-name&gt;.</code></p>\n      <p>Now get you bot to scan the directories and import any event listeners and commands, and lastly, connect to Discord:</p>\n      <pre><code class=\"lang-js\"><span class=\"hljs-selector-tag\">bot</span>\n    <span class=\"hljs-selector-class\">.addDir</span>(path.join(__dirname, <span class=\"hljs-string\">'commands'</span>))\n    <span class=\"hljs-selector-class\">.addDir</span>(path.join(__dirname, <span class=\"hljs-string\">'events'</span>))\n    <span class=\"hljs-selector-class\">.connect</span>();\n</code></pre>\n      <p>Your <code>index.js</code> file should now look something like this:</p>\n      <pre><code class=\"lang-js\"><span class=\"hljs-keyword\">const</span> { Client } = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'yuuko'</span>);\n<span class=\"hljs-keyword\">const</span> path = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'path'</span>);\n<span class=\"hljs-keyword\">const</span> dotenv = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'dotenv'</span>);\n<span class=\"hljs-keyword\">var</span> env = dotenv.config();\nenv = process.env;\n\n<span class=\"hljs-keyword\">const</span> bot = <span class=\"hljs-keyword\">new</span> Client({\n    <span class=\"hljs-attr\">token</span>: env.TOKEN,\n    <span class=\"hljs-attr\">prefix</span>: env.PREFIX,\n    <span class=\"hljs-attr\">ignoreBots</span>: <span class=\"hljs-literal\">true</span>,\n});\n\nbot.extendContext({\n    <span class=\"hljs-attr\">variableOne</span>: <span class=\"hljs-string\">'Variable number 1!'</span>,\n});\nbot.editStatus(<span class=\"hljs-string\">'dnd'</span>); <span class=\"hljs-comment\">// edits bot status</span>\n\nbot.on(<span class=\"hljs-string\">'error'</span>, (err) =&gt; {\n    <span class=\"hljs-built_in\">console</span>.error(err);\n});\n\nbot.globalCommandRequirements = {\n    <span class=\"hljs-attr\">guildOnly</span>: <span class=\"hljs-literal\">true</span>,\n};\n\nbot\n    .addDir(path.join(__dirname, <span class=\"hljs-string\">'commands'</span>))\n    .addDir(path.join(__dirname, <span class=\"hljs-string\">'events'</span>))\n    .connect();\n</code></pre>\n      <h2 id=\"the-ready-event\">\n        The <code>Ready</code> event\n      </h2>\n      <p>\n        Create a file in <code>./events</code> and name it <code>ready.js</code>.\n        Require the EventListener:\n      </p>\n      <pre><code class=\"lang-js\"><span class=\"hljs-keyword\">const</span> { EventListener } = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'yuuko'</span>);\n</code></pre>\n      <p>and create an event listener:</p>\n      <pre><code class=\"lang-js\"><span class=\"hljs-built_in\">module</span>.exports = <span class=\"hljs-keyword\">new</span> EventListener(<span class=\"hljs-string\">'ready'</span>, <span class=\"hljs-function\"><span class=\"hljs-params\">(context)</span> =&gt;</span> {\n  <span class=\"hljs-regexp\">//</span> context.client = bot\n  <span class=\"hljs-built_in\">console</span>.log(`<span class=\"javascript\">Logged <span class=\"hljs-keyword\">in</span> <span class=\"hljs-keyword\">as</span> ${context.client.user.usename}</span>`);\n});\n</code></pre>\n      <p>Alternatively, you may also do:</p>\n      <pre><code class=\"lang-js\"><span class=\"hljs-built_in\">module</span>.exports = <span class=\"hljs-keyword\">new</span> EventListener(<span class=\"hljs-string\">'ready'</span>, <span class=\"hljs-function\"><span class=\"hljs-params\">({client})</span> =&gt;</span> {\n  <span class=\"hljs-regexp\">//</span> client = bot\n  <span class=\"hljs-built_in\">console</span>.log(`<span class=\"javascript\">Logged <span class=\"hljs-keyword\">in</span> <span class=\"hljs-keyword\">as</span> ${client.user.usename}</span>`);\n});\n</code></pre>\n      <p>\n        instead of importing the whole <code>context</code>. You may be thinking:\n        &#39;Hey, I didn&#39;t define the <code>client</code> variable in <code>bot.extendContext({})</code>! Why can it be used here?&#39;\n        Well, Yuuko automatically sets the <code>client</code> as the <code>bot</code>, so you do not need to worry about it!\n      </p>\n      <p>Now, start your project:</p>\n      <pre><code class=\"lang-bash\">nodemon .\n</code></pre>\n      <p>Your final <code>ready.js</code> code:</p>\n      <pre><code class=\"lang-js\">const { EventListener } = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'yuuko'</span>);\n<span class=\"hljs-built_in\">module</span>.exports = <span class=\"hljs-keyword\">new</span> EventListener(<span class=\"hljs-string\">'ready'</span>, <span class=\"hljs-function\"><span class=\"hljs-params\">({client})</span> =&gt;</span> {\n  <span class=\"hljs-regexp\">//</span> client = bot\n  <span class=\"hljs-built_in\">console</span>.log(`<span class=\"javascript\">Logged <span class=\"hljs-keyword\">in</span> <span class=\"hljs-keyword\">as</span> ${client.user.usename}</span>`);\n});\n</code></pre>\n      <h2 id=\"you-first-command\">\n        You first command\n      </h2>\n      <p>\n        Now, create a file in <code>./commands</code>.\n        What command should we create, then?\n        Let&#39;s look to our dear friend Dank Memer for some inspiration:\n        <img\n          src=\"https://i.ibb.co/r700Hs1/2021-07-19.png\"\n          alt=\"\"\n        >\n      </p>\n      <p>There! Let&#39;s make this command then. Name the file you created <code>owo.js</code>.</p>\n      <p>Open it, and put the following code inside:</p>\n      <pre><code class=\"lang-js\">const { Command } = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'yuuko'</span>);\n<span class=\"hljs-built_in\">module</span>.exports = <span class=\"hljs-keyword\">new</span> Command(<span class=\"hljs-string\">'owo'</span>, <span class=\"hljs-function\"><span class=\"hljs-params\">(message, args, context)</span> =&gt;</span> {\n  message.channel.createMessage(<span class=\"hljs-string\">'OwO'</span>);\n});\n</code></pre>\n      <p>and you&#39;re done! Your bot should now respond with &#39;OwO&#39; when you type in the command. It&#39;s that easy!</p>\n      <h1 id=\"conclusion\">\n        Conclusion\n      </h1>\n      <p>\n        Eris is a great library to build Discord Bots, as it is lightweight and fast! I will be teaching you how to make a <code>meme</code> command in my following post. Stay tuned!\n        (PS You might have to wait quite a while as I have a lot of homework, and have upcoming National Exams to take.)\n      </p>\n      <p>Oops. I nearly forgot. The tree of your project folder should now be something like</p>\n      <pre><code class=\"lang-bash\">│   <span class=\"hljs-selector-class\">.env</span>\n│   index<span class=\"hljs-selector-class\">.js</span>\n│   package-lock<span class=\"hljs-selector-class\">.json</span>\n│   package<span class=\"hljs-selector-class\">.json</span>\n│\n├───commands\n│       owo<span class=\"hljs-selector-class\">.js</span>\n│\n├───events\n│       ready<span class=\"hljs-selector-class\">.js</span>\n│\n└───node_modules\n    │   ...\n</code></pre>\n      <p>\n        Take care and goodbye for now!\n        I will be putting the final code for all the files in my next post.\n      </p>\n    </div>\n  </div>\n</template>\n\n<script>\n\nexport default {\n\tname: 'About',\n};\n</script>\n\n<style>\n@import '../../../../def.css';\n</style>\n","import { render } from \"./App.vue?vue&type=template&id=b8e91cc2\"\nimport script from \"./App.vue?vue&type=script&lang=js\"\nexport * from \"./App.vue?vue&type=script&lang=js\"\n\nimport \"./App.vue?vue&type=style&index=0&id=b8e91cc2&lang=css\"\nscript.render = render\n\nexport default script","import { createApp } from 'vue';\nimport App from './App.vue';\n\ncreateApp(App).mount('#app');\n","export * from \"-!../../../../node_modules/mini-css-extract-plugin/dist/loader.js??ref--6-oneOf-1-0!../../../../node_modules/css-loader/dist/cjs.js??ref--6-oneOf-1-1!../../../../node_modules/vue-loader-v16/dist/stylePostLoader.js!../../../../node_modules/postcss-loader/src/index.js??ref--6-oneOf-1-2!../../../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../../../node_modules/vue-loader-v16/dist/index.js??ref--0-1!./App.vue?vue&type=style&index=0&id=b8e91cc2&lang=css\""],"sourceRoot":""}