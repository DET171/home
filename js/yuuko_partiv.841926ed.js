(function(s){function a(a){for(var l,p,r=a[0],c=a[1],o=a[2],h=0,u=[];h<r.length;h++)p=r[h],Object.prototype.hasOwnProperty.call(e,p)&&e[p]&&u.push(e[p][0]),e[p]=0;for(l in c)Object.prototype.hasOwnProperty.call(c,l)&&(s[l]=c[l]);i&&i(a);while(u.length)u.shift()();return t.push.apply(t,o||[]),n()}function n(){for(var s,a=0;a<t.length;a++){for(var n=t[a],l=!0,r=1;r<n.length;r++){var c=n[r];0!==e[c]&&(l=!1)}l&&(t.splice(a--,1),s=p(p.s=n[0]))}return s}var l={},e={yuuko_partiv:0},t=[];function p(a){if(l[a])return l[a].exports;var n=l[a]={i:a,l:!1,exports:{}};return s[a].call(n.exports,n,n.exports,p),n.l=!0,n.exports}p.m=s,p.c=l,p.d=function(s,a,n){p.o(s,a)||Object.defineProperty(s,a,{enumerable:!0,get:n})},p.r=function(s){"undefined"!==typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(s,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(s,"__esModule",{value:!0})},p.t=function(s,a){if(1&a&&(s=p(s)),8&a)return s;if(4&a&&"object"===typeof s&&s&&s.__esModule)return s;var n=Object.create(null);if(p.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:s}),2&a&&"string"!=typeof s)for(var l in s)p.d(n,l,function(a){return s[a]}.bind(null,l));return n},p.n=function(s){var a=s&&s.__esModule?function(){return s["default"]}:function(){return s};return p.d(a,"a",a),a},p.o=function(s,a){return Object.prototype.hasOwnProperty.call(s,a)},p.p="";var r=window["webpackJsonp"]=window["webpackJsonp"]||[],c=r.push.bind(r);r.push=a,r=r.slice();for(var o=0;o<r.length;o++)a(r[o]);var i=c;t.push([6,"chunk-vendors"]),n()})({6:function(s,a,n){s.exports=n("7089")},6942:function(s,a,n){},7089:function(s,a,n){"use strict";n.r(a);var l=n("7a23");const e={id:"app"},t=Object(l["f"])('<div class="markdown-body"><h1>Eris &amp; Yuuko: Part IV: The Guild Object + FUN Commands</h1><p>In this post, I will be teaching you how to write a <code>guild</code> command. </p><h1 id="the-guild-command"> The <code>guild</code> command </h1><p>Here&#39;s the code As usual, here&#39;s the code (put it in <code>./commands/guild.js</code>):</p><pre><code class="lang-js"><span class="hljs-keyword">const</span> { Command } = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#39;yuuko&#39;</span>);\n<span class="hljs-keyword">const</span> moment = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#39;moment&#39;</span>);\n<span class="hljs-built_in">module</span>.exports = <span class="hljs-keyword">new</span> Command([<span class="hljs-string">&#39;guild&#39;</span>, <span class="hljs-string">&#39;server&#39;</span>], (message) =&gt; {\n    <span class="hljs-keyword">const</span> guild = message.channel.guild;\n    <span class="hljs-keyword">const</span> owner = guild.members.get(guild.ownerID);\n    message.channel.createMessage({\n        <span class="hljs-attr">embed</span>: {\n            <span class="hljs-attr">title</span>: <span class="hljs-string">&#39;Guild Information&#39;</span>,\n            <span class="hljs-attr">description</span>: <span class="hljs-string">`Guild information for <span class="hljs-subst">${guild.name}</span> (id: \\`<span class="hljs-subst">${guild.id}</span>\\`)`</span>,\n            <span class="hljs-attr">color</span>: <span class="hljs-number">11272041</span>,\n            <span class="hljs-attr">thumbnail</span>: {\n                <span class="hljs-attr">url</span>: guild.iconURL,\n            },\n            <span class="hljs-attr">fields</span>: [\n                {\n                    <span class="hljs-attr">name</span>: <span class="hljs-string">&#39;Owner:&#39;</span>,\n                    <span class="hljs-attr">value</span>: <span class="hljs-string">`<span class="hljs-subst">${owner.username}</span>#<span class="hljs-subst">${owner.discriminator}</span> (id: \\`<span class="hljs-subst">${guild.ownerID}</span>\\`)`</span>,\n                    <span class="hljs-attr">inline</span>: <span class="hljs-literal">false</span>,\n                },\n                {\n                    <span class="hljs-attr">name</span>: <span class="hljs-string">&#39;Created at:&#39;</span>,\n                    <span class="hljs-attr">value</span>: <span class="hljs-string">`<span class="hljs-subst">${moment.utc(guild.createdAt).format(<span class="hljs-string">&#39;MMMM, Do YYYY, h:mm:ss a&#39;</span>)}</span>`</span>,\n                    <span class="hljs-attr">inline</span>: <span class="hljs-literal">false</span>,\n                },\n                {\n                    <span class="hljs-attr">name</span>: <span class="hljs-string">&#39;Member count:&#39;</span>,\n                    <span class="hljs-attr">value</span>: <span class="hljs-string">`<span class="hljs-subst">${guild.memberCount}</span> members`</span>,\n                    <span class="hljs-attr">inline</span>: <span class="hljs-literal">false</span>,\n                },\n            ],\n        },\n    });\n});\n</code></pre><p>Again, this is quite simple. This is mostly properties of the guild object. More can be found <a href="https://abal.moe/Eris/docs/Guild">here</a>. I will not be covering this in detail, as I will also be covering a <code>roll</code> command, which is more complex.</p><h1 id="the-roll-command"> The <code>roll</code> command </h1><p>As usual, here&#39;s the code (put it in <code>./commands/roll.js</code>):</p><pre><code class="lang-js"><span class="hljs-keyword">const</span> { Command } = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#39;yuuko&#39;</span>);\n<span class="hljs-built_in">require</span>(<span class="hljs-string">&#39;dotenv&#39;</span>).config();\n<span class="hljs-built_in">module</span>.exports = <span class="hljs-keyword">new</span> Command([<span class="hljs-string">&#39;roll&#39;</span>, <span class="hljs-string">&#39;rolladie&#39;</span>, <span class="hljs-string">&#39;rolladice&#39;</span>], (message, args) =&gt; {\n    <span class="hljs-keyword">const</span> arg = args.join(<span class="hljs-string">&#39; &#39;</span>);\n    <span class="hljs-keyword">if</span>(!args.length) {\n        message.channel.createMessage({\n            <span class="hljs-attr">embed</span>: {\n                <span class="hljs-attr">title</span>: <span class="hljs-string">`<span class="hljs-subst">${message.author.username}</span> rolled a die!`</span>,\n                <span class="hljs-attr">description</span>: <span class="hljs-string">`<span class="hljs-subst">${message.author.mention}</span> rolled a die and got **<span class="hljs-subst">${<span class="hljs-built_in">Math</span>.floor(<span class="hljs-built_in">Math</span>.random() * <span class="hljs-number">6</span>) + <span class="hljs-number">1</span>}</span>**!`</span>,\n                <span class="hljs-attr">color</span>: <span class="hljs-number">12252021</span>,\n                <span class="hljs-attr">fields</span>: [\n                ],\n            },\n        });\n    }\n    <span class="hljs-keyword">else</span> {\n        <span class="hljs-keyword">try</span> {\n            <span class="hljs-keyword">const</span> num = arg.trim().split(<span class="hljs-string">&#39;d&#39;</span>);\n            <span class="hljs-keyword">const</span> times = <span class="hljs-built_in">parseInt</span>(num[<span class="hljs-number">0</span>]);\n            <span class="hljs-keyword">const</span> max = <span class="hljs-built_in">parseInt</span>(num[<span class="hljs-number">1</span>]) || <span class="hljs-number">6</span>;\n            <span class="hljs-keyword">const</span> nums = [];\n            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; times; i++) {\n                <span class="hljs-keyword">let</span> result = <span class="hljs-built_in">Math</span>.floor(<span class="hljs-built_in">Math</span>.random() * max); <span class="hljs-comment">// eslint-disable-line prefer-const</span>\n                result = result + <span class="hljs-number">1</span>;\n                nums.push(result);\n            }\n            message.channel.createMessage({\n                <span class="hljs-attr">embed</span>: {\n                    <span class="hljs-attr">title</span>: <span class="hljs-string">`<span class="hljs-subst">${message.author.username}</span> rolled a <span class="hljs-subst">${times}</span> dice!`</span>,\n                    <span class="hljs-attr">description</span>: <span class="hljs-string">`<span class="hljs-subst">${message.author.mention}</span> rolled a <span class="hljs-subst">${times}</span> dice and got [ **<span class="hljs-subst">${nums.join(<span class="hljs-string">&#39; &#39;</span>)}</span>** ]!`</span>,\n                    <span class="hljs-attr">color</span>: <span class="hljs-number">12252021</span>,\n                },\n            });\n        }\n        <span class="hljs-keyword">catch</span>(err) {\n            <span class="hljs-built_in">console</span>.warn(err);\n            message.channel.createMessage(<span class="hljs-string">`<span class="hljs-subst">${message.author.mention}</span>, the correct usage would be \\`<span class="hljs-subst">${process.env.PREFIX}</span> roll &lt;number of dice to roll&gt;d&lt;highest number on the die&gt;\\``</span>);\n        }\n    }\n});\n</code></pre><p> Now, let me explain. A user is supposed to type the command in the followoing format, assuming the prefix is <code>!</code>: </p><pre><code class="lang-bash"><span class="hljs-addition">!roll</span>\n</code></pre><pre><code class="lang-bash">!roll <span class="hljs-number">10</span>d6\n# or !roll <span class="hljs-number">10</span> d <span class="hljs-number">6</span>\n</code></pre><p>btw there are few aliases for this command:</p><pre><code class="lang-js">[<span class="hljs-symbol">&#39;roll</span>&#39;, <span class="hljs-symbol">&#39;rolladie</span>&#39;, <span class="hljs-symbol">&#39;rolladice</span>&#39;]\n</code></pre><p>We check for arguments, and if there are none, we roll a random number from 1 to 6 and send it in an embed:</p><pre><code class="lang-js"><span class="hljs-selector-tag">if</span>(!args.length) {\n        <span class="hljs-selector-tag">message</span><span class="hljs-selector-class">.channel</span><span class="hljs-selector-class">.createMessage</span>({\n            <span class="hljs-attribute">embed</span>: {\n                <span class="hljs-attribute">title</span>: <span class="hljs-built_in">`${message.author.username} rolled a die!`</span>,\n                <span class="hljs-attribute">description</span>: <span class="hljs-built_in">`${message.author.mention} rolled a die and got **${Math.floor(Math.random() * 6) + 1}**!`</span>,\n                <span class="hljs-attribute">color</span>: <span class="hljs-number">12252021</span>,\n                <span class="hljs-attribute">fields</span>: [\n                ],\n            },\n        });\n    }\n</code></pre><p>And if there are arguments, we join the arguments:</p><pre><code class="lang-js"><span class="hljs-keyword">const</span> arg = args.<span class="hljs-keyword">join</span>(<span class="hljs-string">&#39; &#39;</span>);\n</code></pre><p> and split it by <code>d</code>. We first initialize an empty array<code>[]</code>, use the <code>for</code> loop to roll a random number between the number the user specified (if not, the default is <code>6</code>) and push the result to the array the number of times the user specified.<br>After that has been completed, we join the array with spaces and send it in an embed: </p><pre><code class="lang-js"><span class="hljs-keyword">else</span> {\n        <span class="hljs-keyword">try</span> {\n            <span class="hljs-keyword">const</span> num = arg.trim().split(<span class="hljs-string">&#39;d&#39;</span>);\n            <span class="hljs-keyword">const</span> times = <span class="hljs-built_in">parseInt</span>(num[<span class="hljs-number">0</span>]);\n            <span class="hljs-keyword">const</span> max = <span class="hljs-built_in">parseInt</span>(num[<span class="hljs-number">1</span>]) || <span class="hljs-number">6</span>;\n            <span class="hljs-keyword">const</span> nums = [];\n            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; times; i++) {\n                <span class="hljs-keyword">let</span> result = <span class="hljs-built_in">Math</span>.floor(<span class="hljs-built_in">Math</span>.random() * max); <span class="hljs-comment">// eslint-disable-line prefer-const</span>\n                result = result + <span class="hljs-number">1</span>;\n                nums.push(result);\n            }\n            message.channel.createMessage({\n                <span class="hljs-attr">embed</span>: {\n                    <span class="hljs-attr">title</span>: <span class="hljs-string">`<span class="hljs-subst">${message.author.username}</span> rolled a <span class="hljs-subst">${times}</span> dice!`</span>,\n                    <span class="hljs-attr">description</span>: <span class="hljs-string">`<span class="hljs-subst">${message.author.mention}</span> rolled a <span class="hljs-subst">${times}</span> dice and got [ **<span class="hljs-subst">${nums.join(<span class="hljs-string">&#39; &#39;</span>)}</span>** ]!`</span>,\n                    <span class="hljs-attr">color</span>: <span class="hljs-number">12252021</span>,\n                },\n            });\n        }\n        <span class="hljs-keyword">catch</span>(err) {\n            <span class="hljs-built_in">console</span>.warn(err);\n            message.channel.createMessage(<span class="hljs-string">`<span class="hljs-subst">${message.author.mention}</span>, the correct usage would be \\`<span class="hljs-subst">${process.env.PREFIX}</span> roll &lt;number of dice to roll&gt;d&lt;highest number on the die&gt;\\``</span>);\n        }\n    }\n</code></pre><p> EZPZ. PS tell me in the comments if you have any trouble. </p><h1 id="conclusion"> Conclusion </h1><p> Woohoo! We made a <code>fun</code> command today, and also accessed the <code>guild</code> object. That&#39;s about the end of it for today. Take care and goodbye! </p></div>',1);function p(s,a,n,p,r,c){return Object(l["i"])(),Object(l["d"])("div",e,[t])}var r={name:"About"};n("b370");r.render=p;var c=r;Object(l["c"])(c).mount("#app")},b370:function(s,a,n){"use strict";n("6942")}});
//# sourceMappingURL=yuuko_partiv.841926ed.js.map