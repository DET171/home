{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/pages/eris/partiii/App.vue?cdbe","webpack:///./src/pages/eris/partiii/App.vue","webpack:///./src/pages/eris/partiii/App.vue?5b2a","webpack:///./src/pages/eris/partiii/main.js"],"names":["webpackJsonpCallback","data","moduleId","chunkId","chunkIds","moreModules","executeModules","i","resolves","length","Object","prototype","hasOwnProperty","call","installedChunks","push","modules","parentJsonpFunction","shift","deferredModules","apply","checkDeferredModules","result","deferredModule","fulfilled","j","depId","splice","__webpack_require__","s","installedModules","exports","module","l","m","c","d","name","getter","o","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","p","jsonpArray","window","oldJsonpFunction","slice","id","render","createApp","App","mount"],"mappings":"aACE,SAASA,EAAqBC,GAQ7B,IAPA,IAMIC,EAAUC,EANVC,EAAWH,EAAK,GAChBI,EAAcJ,EAAK,GACnBK,EAAiBL,EAAK,GAIHM,EAAI,EAAGC,EAAW,GACpCD,EAAIH,EAASK,OAAQF,IACzBJ,EAAUC,EAASG,GAChBG,OAAOC,UAAUC,eAAeC,KAAKC,EAAiBX,IAAYW,EAAgBX,IACpFK,EAASO,KAAKD,EAAgBX,GAAS,IAExCW,EAAgBX,GAAW,EAE5B,IAAID,KAAYG,EACZK,OAAOC,UAAUC,eAAeC,KAAKR,EAAaH,KACpDc,EAAQd,GAAYG,EAAYH,IAG/Be,GAAqBA,EAAoBhB,GAE5C,MAAMO,EAASC,OACdD,EAASU,OAATV,GAOD,OAHAW,EAAgBJ,KAAKK,MAAMD,EAAiBb,GAAkB,IAGvDe,IAER,SAASA,IAER,IADA,IAAIC,EACIf,EAAI,EAAGA,EAAIY,EAAgBV,OAAQF,IAAK,CAG/C,IAFA,IAAIgB,EAAiBJ,EAAgBZ,GACjCiB,GAAY,EACRC,EAAI,EAAGA,EAAIF,EAAed,OAAQgB,IAAK,CAC9C,IAAIC,EAAQH,EAAeE,GACG,IAA3BX,EAAgBY,KAAcF,GAAY,GAE3CA,IACFL,EAAgBQ,OAAOpB,IAAK,GAC5Be,EAASM,EAAoBA,EAAoBC,EAAIN,EAAe,KAItE,OAAOD,EAIR,IAAIQ,EAAmB,GAKnBhB,EAAkB,CACrB,cAAiB,GAGdK,EAAkB,GAGtB,SAASS,EAAoB1B,GAG5B,GAAG4B,EAAiB5B,GACnB,OAAO4B,EAAiB5B,GAAU6B,QAGnC,IAAIC,EAASF,EAAiB5B,GAAY,CACzCK,EAAGL,EACH+B,GAAG,EACHF,QAAS,IAUV,OANAf,EAAQd,GAAUW,KAAKmB,EAAOD,QAASC,EAAQA,EAAOD,QAASH,GAG/DI,EAAOC,GAAI,EAGJD,EAAOD,QAKfH,EAAoBM,EAAIlB,EAGxBY,EAAoBO,EAAIL,EAGxBF,EAAoBQ,EAAI,SAASL,EAASM,EAAMC,GAC3CV,EAAoBW,EAAER,EAASM,IAClC3B,OAAO8B,eAAeT,EAASM,EAAM,CAAEI,YAAY,EAAMC,IAAKJ,KAKhEV,EAAoBe,EAAI,SAASZ,GACX,qBAAXa,QAA0BA,OAAOC,aAC1CnC,OAAO8B,eAAeT,EAASa,OAAOC,YAAa,CAAEC,MAAO,WAE7DpC,OAAO8B,eAAeT,EAAS,aAAc,CAAEe,OAAO,KAQvDlB,EAAoBmB,EAAI,SAASD,EAAOE,GAEvC,GADU,EAAPA,IAAUF,EAAQlB,EAAoBkB,IAC/B,EAAPE,EAAU,OAAOF,EACpB,GAAW,EAAPE,GAA8B,kBAAVF,GAAsBA,GAASA,EAAMG,WAAY,OAAOH,EAChF,IAAII,EAAKxC,OAAOyC,OAAO,MAGvB,GAFAvB,EAAoBe,EAAEO,GACtBxC,OAAO8B,eAAeU,EAAI,UAAW,CAAET,YAAY,EAAMK,MAAOA,IACtD,EAAPE,GAA4B,iBAATF,EAAmB,IAAI,IAAIM,KAAON,EAAOlB,EAAoBQ,EAAEc,EAAIE,EAAK,SAASA,GAAO,OAAON,EAAMM,IAAQC,KAAK,KAAMD,IAC9I,OAAOF,GAIRtB,EAAoB0B,EAAI,SAAStB,GAChC,IAAIM,EAASN,GAAUA,EAAOiB,WAC7B,WAAwB,OAAOjB,EAAO,YACtC,WAA8B,OAAOA,GAEtC,OADAJ,EAAoBQ,EAAEE,EAAQ,IAAKA,GAC5BA,GAIRV,EAAoBW,EAAI,SAASgB,EAAQC,GAAY,OAAO9C,OAAOC,UAAUC,eAAeC,KAAK0C,EAAQC,IAGzG5B,EAAoB6B,EAAI,GAExB,IAAIC,EAAaC,OAAO,gBAAkBA,OAAO,iBAAmB,GAChEC,EAAmBF,EAAW3C,KAAKsC,KAAKK,GAC5CA,EAAW3C,KAAOf,EAClB0D,EAAaA,EAAWG,QACxB,IAAI,IAAItD,EAAI,EAAGA,EAAImD,EAAWjD,OAAQF,IAAKP,EAAqB0D,EAAWnD,IAC3E,IAAIU,EAAsB2C,EAI1BzC,EAAgBJ,KAAK,CAAC,EAAE,kBAEjBM,K,2ECvJT,W,yFCCOyC,GAAG,O,msSAAR,eA+HM,MA/HN,EA+HM,CA9HJ,IAmIW,OACdzB,KAAM,S,UCjIP,EAAO0B,OAASA,EAED,QCJfC,eAAUC,GAAKC,MAAM","file":"js/yuuko_partiii-legacy.3e1c2767.js","sourcesContent":[" \t// install a JSONP callback for chunk loading\n \tfunction webpackJsonpCallback(data) {\n \t\tvar chunkIds = data[0];\n \t\tvar moreModules = data[1];\n \t\tvar executeModules = data[2];\n\n \t\t// add \"moreModules\" to the modules object,\n \t\t// then flag all \"chunkIds\" as loaded and fire callback\n \t\tvar moduleId, chunkId, i = 0, resolves = [];\n \t\tfor(;i < chunkIds.length; i++) {\n \t\t\tchunkId = chunkIds[i];\n \t\t\tif(Object.prototype.hasOwnProperty.call(installedChunks, chunkId) && installedChunks[chunkId]) {\n \t\t\t\tresolves.push(installedChunks[chunkId][0]);\n \t\t\t}\n \t\t\tinstalledChunks[chunkId] = 0;\n \t\t}\n \t\tfor(moduleId in moreModules) {\n \t\t\tif(Object.prototype.hasOwnProperty.call(moreModules, moduleId)) {\n \t\t\t\tmodules[moduleId] = moreModules[moduleId];\n \t\t\t}\n \t\t}\n \t\tif(parentJsonpFunction) parentJsonpFunction(data);\n\n \t\twhile(resolves.length) {\n \t\t\tresolves.shift()();\n \t\t}\n\n \t\t// add entry modules from loaded chunk to deferred list\n \t\tdeferredModules.push.apply(deferredModules, executeModules || []);\n\n \t\t// run deferred modules when all chunks ready\n \t\treturn checkDeferredModules();\n \t};\n \tfunction checkDeferredModules() {\n \t\tvar result;\n \t\tfor(var i = 0; i < deferredModules.length; i++) {\n \t\t\tvar deferredModule = deferredModules[i];\n \t\t\tvar fulfilled = true;\n \t\t\tfor(var j = 1; j < deferredModule.length; j++) {\n \t\t\t\tvar depId = deferredModule[j];\n \t\t\t\tif(installedChunks[depId] !== 0) fulfilled = false;\n \t\t\t}\n \t\t\tif(fulfilled) {\n \t\t\t\tdeferredModules.splice(i--, 1);\n \t\t\t\tresult = __webpack_require__(__webpack_require__.s = deferredModule[0]);\n \t\t\t}\n \t\t}\n\n \t\treturn result;\n \t}\n\n \t// The module cache\n \tvar installedModules = {};\n\n \t// object to store loaded and loading chunks\n \t// undefined = chunk not loaded, null = chunk preloaded/prefetched\n \t// Promise = chunk loading, 0 = chunk loaded\n \tvar installedChunks = {\n \t\t\"yuuko_partiii\": 0\n \t};\n\n \tvar deferredModules = [];\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \tvar jsonpArray = window[\"webpackJsonp\"] = window[\"webpackJsonp\"] || [];\n \tvar oldJsonpFunction = jsonpArray.push.bind(jsonpArray);\n \tjsonpArray.push = webpackJsonpCallback;\n \tjsonpArray = jsonpArray.slice();\n \tfor(var i = 0; i < jsonpArray.length; i++) webpackJsonpCallback(jsonpArray[i]);\n \tvar parentJsonpFunction = oldJsonpFunction;\n\n\n \t// add entry module to deferred list\n \tdeferredModules.push([5,\"chunk-vendors\"]);\n \t// run deferred modules when ready\n \treturn checkDeferredModules();\n","export * from \"-!../../../../node_modules/mini-css-extract-plugin/dist/loader.js??ref--6-oneOf-1-0!../../../../node_modules/css-loader/dist/cjs.js??ref--6-oneOf-1-1!../../../../node_modules/vue-loader-v16/dist/stylePostLoader.js!../../../../node_modules/postcss-loader/src/index.js??ref--6-oneOf-1-2!../../../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../../../node_modules/vue-loader-v16/dist/index.js??ref--0-1!./App.vue?vue&type=style&index=0&id=68facbc8&lang=css\"","<template>\n  <div id=\"app\">\n    <div class=\"markdown-body\">\n      <h1>Eris &amp; Yuuko: Part III: The Member Object</h1>\n\n      <p>In this post, I will be teaching you how to write a <code>whois</code> command.</p>\n      <h1 id=\"the-whois-command\">\n        The <code>whois</code> command\n      </h1>\n      <p>So, here&#39;s the code:</p>\n      <pre><code class=\"lang-js\"><span class=\"hljs-keyword\">const</span> { Command } = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'yuuko'</span>);\n<span class=\"hljs-keyword\">const</span> moment = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'moment'</span>);\n<span class=\"hljs-keyword\">const</span> { today } = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'../../utils.js'</span>);\n<span class=\"hljs-built_in\">module</span>.exports = <span class=\"hljs-keyword\">new</span> Command([<span class=\"hljs-string\">'whois'</span>, <span class=\"hljs-string\">'member'</span>], <span class=\"hljs-keyword\">async</span> (message, args, context) =&gt; { <span class=\"hljs-comment\">// eslint-disable-line no-unused-vars</span>\n    <span class=\"hljs-keyword\">if</span> (!args[<span class=\"hljs-number\">0</span>]) {\n        <span class=\"hljs-keyword\">return</span> message.channel.createMessage(<span class=\"hljs-string\">`<span class=\"hljs-subst\">${message.author.mention}</span>, apologies! Please specify a particular member!`</span>);\n    }\n    <span class=\"hljs-keyword\">const</span> user = message.mentions[<span class=\"hljs-number\">0</span>];\n    <span class=\"hljs-keyword\">const</span> guild = message.channel.guild;\n    <span class=\"hljs-keyword\">const</span> member = <span class=\"hljs-keyword\">await</span> guild.members.get(user.id);\n    message.channel.createMessage({\n        <span class=\"hljs-attr\">embed</span>: {\n            <span class=\"hljs-attr\">title</span>: <span class=\"hljs-string\">`User information for <span class=\"hljs-subst\">${user.username}</span>#<span class=\"hljs-subst\">${user.discriminator}</span>`</span>,\n            <span class=\"hljs-attr\">thumbnail</span>: {\n                <span class=\"hljs-attr\">url</span>: user.avatarURL,\n            },\n            <span class=\"hljs-attr\">color</span>: <span class=\"hljs-number\">0x008000</span>,\n            <span class=\"hljs-attr\">fields</span>: [\n                {\n                    <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">'Account created at:'</span>,\n                    <span class=\"hljs-attr\">value</span>: <span class=\"hljs-string\">`<span class=\"hljs-subst\">${moment.utc(user.createdAt).format(<span class=\"hljs-string\">'MMMM, Do YYYY, h:mm:ss a'</span>)}</span>`</span>,\n                    <span class=\"hljs-attr\">inline</span>: <span class=\"hljs-literal\">false</span>,\n                },\n                {\n                    <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">'User ID:'</span>,\n                    <span class=\"hljs-attr\">value</span>: <span class=\"hljs-string\">`\\`<span class=\"hljs-subst\">${user.id}</span>\\``</span>,\n                    <span class=\"hljs-attr\">inline</span>: <span class=\"hljs-literal\">false</span>,\n                },\n                {\n                    <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">'Roles:'</span>,\n                    <span class=\"hljs-attr\">value</span>: <span class=\"hljs-string\">'&lt;@&amp;'</span> + member.roles.map(<span class=\"hljs-function\">(<span class=\"hljs-params\">r</span>) =&gt;</span> <span class=\"hljs-string\">`<span class=\"hljs-subst\">${r}</span>`</span>).join(<span class=\"hljs-string\">'&gt;, &lt;@&amp;'</span>) + <span class=\"hljs-string\">'&gt;'</span>,\n                    <span class=\"hljs-attr\">inline</span>: <span class=\"hljs-literal\">false</span>,\n                },\n                {\n                    <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">'Joined server at:'</span>,\n                    <span class=\"hljs-attr\">value</span>: <span class=\"hljs-string\">`<span class=\"hljs-subst\">${moment.utc(member.joinedAt).format(<span class=\"hljs-string\">'MMMM, Do YYYY, h:mm:ss a'</span>)}</span>`</span>,\n                    <span class=\"hljs-attr\">inline</span>: <span class=\"hljs-literal\">false</span>,\n                },\n            ],\n            <span class=\"hljs-attr\">footer</span>: {\n                <span class=\"hljs-attr\">text</span>: today,\n            },\n        },\n    });\n});\n</code></pre>\n      <p>Create a file in <code>./commands</code>, and name it <code>whois.js</code>. Proceed to dump the above code into <code>whois.js</code>.  You <em>MIGHT</em> have to run <em><code>npm i moment --save</code></em> to install the <code>moment</code> module.</p>\n      <p>\n        Now, let me explain the code.\n        As usual, we require the packages, create the command, and export it:\n      </p>\n      <pre><code class=\"lang-js\"><span class=\"hljs-keyword\">const</span> { Command } = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'yuuko'</span>);\n<span class=\"hljs-keyword\">const</span> moment = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'moment'</span>);\n<span class=\"hljs-built_in\">module</span>.exports = <span class=\"hljs-keyword\">new</span> Command(<span class=\"hljs-string\">'whois'</span>, <span class=\"hljs-keyword\">async</span> (message, args, context) =&gt; {\n  <span class=\"hljs-comment\">// code here</span>\n});\n</code></pre>\n      <p>We will then check for arguments. If there are none, we stop the code (or it will return <code>undefined</code>):</p>\n      <pre><code class=\"lang-js\"><span class=\"hljs-keyword\">if</span> (!args[<span class=\"hljs-number\">0</span>]) {\n    <span class=\"hljs-keyword\">return</span> message.channel.createMessage(`${message.author.mention}, apologies! Please specify <span class=\"hljs-literal\">a</span> particular member!`)<span class=\"hljs-comment\">;</span>\n}\n</code></pre>\n      <p>We use <code>message.author.mention</code> to mention the message author.</p>\n      <p>We get the first user that is mentioned in the message, get the guild the message was sent in, and get the <code>member</code> object from the <code>guild</code> object:</p>\n      <pre><code class=\"lang-js\"><span class=\"hljs-attribute\">const user</span> = message.mentions[0];\n<span class=\"hljs-attribute\">const guild</span> = message.channel.guild;\n<span class=\"hljs-attribute\">const member</span> = await guild.members.get(user.id);\n</code></pre>\n      <p>After that, we proceed to send the embed message with the <code>member</code> and <code>user</code> information:</p>\n      <pre><code class=\"lang-js\">message.channel.createMessage({\n        embed: {\n            title: `User information for ${user.username}#${user.discriminator}`,\n            thumbnail: {\n                url: user.avatarURL,\n            },\n            color: <span class=\"hljs-number\">0x008000</span>,\n            fields: [\n                {\n                    name: <span class=\"hljs-string\">'Account created at:'</span>,\n                    value: `${moment.utc(user.createdAt).format(<span class=\"hljs-string\">'MMMM, Do YYYY, h:mm:ss a'</span>)}`,\n                    <span class=\"hljs-keyword\">inline</span>: false,\n                },\n                {\n                    name: <span class=\"hljs-string\">'User ID:'</span>,\n                    value: `\\`${user.id}\\``,\n                    <span class=\"hljs-keyword\">inline</span>: false,\n                },\n                {\n                    name: <span class=\"hljs-string\">'Roles:'</span>,\n                    value: <span class=\"hljs-string\">'&lt;@&amp;'</span> + member.roles.map((r) =&gt; `${r}`).join(<span class=\"hljs-string\">'&gt;, &lt;@&amp;'</span>) + <span class=\"hljs-string\">'&gt;'</span>,\n                    <span class=\"hljs-keyword\">inline</span>: false,\n                },\n                {\n                    name: <span class=\"hljs-string\">'Joined server at:'</span>,\n                    value: `${moment.utc(member.joinedAt).format(<span class=\"hljs-string\">'MMMM, Do YYYY, h:mm:ss a'</span>)}`,\n                    <span class=\"hljs-keyword\">inline</span>: false,\n                },\n            ],\n        },\n    });\n</code></pre>\n      <p>\n        However, what if you wanted this command the have two triggers (e.g. <code>whois</code> and <code>member</code>) instead of just one trigger(<code>whois</code>)?\n        That&#39;s quite easy. You just have to replace <code>module.exports = new Command(&#39;whois&#39;, async (message, args, context) =&gt;</code> with <code>module.exports = new Command([&#39;whois&#39;, &#39;member&#39;], async (message, args, context) =&gt;</code>\n      </p>\n      <p>This are just some <code>user</code> and <code>member</code> properties, more of them can found at the following pages:</p>\n      <ul>\n        <li><a href=\"https://abal.moe/Eris/docs/Member\">Member</a></li>\n        <li><a href=\"https://abal.moe/Eris/docs/User\">User</a></li>\n      </ul>\n      <h1 id=\"conclusion\">\n        Conclusion\n      </h1>\n      <p>\n        In this article, we learnt how to send more advanced embed with fields, create command aliases, and fetch members from the guild objects. In my next post, I will be making a <code>guild</code> command that shows information about the guild the message was sent in.\n        Have a nice day!\n      </p>\n    </div>\n  </div>\n</template>\n\n<script>\n\nexport default {\n\tname: 'About',\n};\n</script>\n\n<style>\n@import '../../../../def.css';\n</style>\n","import { render } from \"./App.vue?vue&type=template&id=68facbc8\"\nimport script from \"./App.vue?vue&type=script&lang=js\"\nexport * from \"./App.vue?vue&type=script&lang=js\"\n\nimport \"./App.vue?vue&type=style&index=0&id=68facbc8&lang=css\"\nscript.render = render\n\nexport default script","import { createApp } from 'vue';\nimport App from './App.vue';\n\ncreateApp(App).mount('#app');\n"],"sourceRoot":""}