(function(s){function n(n){for(var e,r,o=n[0],p=n[1],c=n[2],h=0,m=[];h<o.length;h++)r=o[h],Object.prototype.hasOwnProperty.call(t,r)&&t[r]&&m.push(t[r][0]),t[r]=0;for(e in p)Object.prototype.hasOwnProperty.call(p,e)&&(s[e]=p[e]);i&&i(n);while(m.length)m.shift()();return l.push.apply(l,c||[]),a()}function a(){for(var s,n=0;n<l.length;n++){for(var a=l[n],e=!0,o=1;o<a.length;o++){var p=a[o];0!==t[p]&&(e=!1)}e&&(l.splice(n--,1),s=r(r.s=a[0]))}return s}var e={},t={yuuko_partiii:0},l=[];function r(n){if(e[n])return e[n].exports;var a=e[n]={i:n,l:!1,exports:{}};return s[n].call(a.exports,a,a.exports,r),a.l=!0,a.exports}r.m=s,r.c=e,r.d=function(s,n,a){r.o(s,n)||Object.defineProperty(s,n,{enumerable:!0,get:a})},r.r=function(s){"undefined"!==typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(s,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(s,"__esModule",{value:!0})},r.t=function(s,n){if(1&n&&(s=r(s)),8&n)return s;if(4&n&&"object"===typeof s&&s&&s.__esModule)return s;var a=Object.create(null);if(r.r(a),Object.defineProperty(a,"default",{enumerable:!0,value:s}),2&n&&"string"!=typeof s)for(var e in s)r.d(a,e,function(n){return s[n]}.bind(null,e));return a},r.n=function(s){var n=s&&s.__esModule?function(){return s["default"]}:function(){return s};return r.d(n,"a",n),n},r.o=function(s,n){return Object.prototype.hasOwnProperty.call(s,n)},r.p="/";var o=window["webpackJsonp"]=window["webpackJsonp"]||[],p=o.push.bind(o);o.push=n,o=o.slice();for(var c=0;c<o.length;c++)n(o[c]);var i=p;l.push([5,"chunk-vendors"]),a()})({5:function(s,n,a){s.exports=a("bda8")},7532:function(s,n,a){"use strict";a("9143")},9143:function(s,n,a){},bda8:function(s,n,a){"use strict";a.r(n);var e=a("7a23");const t={id:"app"},l=Object(e["f"])('<div class="markdown-body"><h1>Eris &amp; Yuuko: Part III: The Member Object</h1><p>In this post, I will be teaching you how to write a <code>whois</code> command.</p><h1 id="the-whois-command"> The <code>whois</code> command </h1><p>So, here&#39;s the code:</p><pre><code class="lang-js"><span class="hljs-keyword">const</span> { Command } = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#39;yuuko&#39;</span>);\n<span class="hljs-keyword">const</span> moment = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#39;moment&#39;</span>);\n<span class="hljs-keyword">const</span> { today } = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#39;../../utils.js&#39;</span>);\n<span class="hljs-built_in">module</span>.exports = <span class="hljs-keyword">new</span> Command([<span class="hljs-string">&#39;whois&#39;</span>, <span class="hljs-string">&#39;member&#39;</span>], <span class="hljs-keyword">async</span> (message, args, context) =&gt; { <span class="hljs-comment">// eslint-disable-line no-unused-vars</span>\n    <span class="hljs-keyword">if</span> (!args[<span class="hljs-number">0</span>]) {\n        <span class="hljs-keyword">return</span> message.channel.createMessage(<span class="hljs-string">`<span class="hljs-subst">${message.author.mention}</span>, apologies! Please specify a particular member!`</span>);\n    }\n    <span class="hljs-keyword">const</span> user = message.mentions[<span class="hljs-number">0</span>];\n    <span class="hljs-keyword">const</span> guild = message.channel.guild;\n    <span class="hljs-keyword">const</span> member = <span class="hljs-keyword">await</span> guild.members.get(user.id);\n    message.channel.createMessage({\n        <span class="hljs-attr">embed</span>: {\n            <span class="hljs-attr">title</span>: <span class="hljs-string">`User information for <span class="hljs-subst">${user.username}</span>#<span class="hljs-subst">${user.discriminator}</span>`</span>,\n            <span class="hljs-attr">thumbnail</span>: {\n                <span class="hljs-attr">url</span>: user.avatarURL,\n            },\n            <span class="hljs-attr">color</span>: <span class="hljs-number">0x008000</span>,\n            <span class="hljs-attr">fields</span>: [\n                {\n                    <span class="hljs-attr">name</span>: <span class="hljs-string">&#39;Account created at:&#39;</span>,\n                    <span class="hljs-attr">value</span>: <span class="hljs-string">`<span class="hljs-subst">${moment.utc(user.createdAt).format(<span class="hljs-string">&#39;MMMM, Do YYYY, h:mm:ss a&#39;</span>)}</span>`</span>,\n                    <span class="hljs-attr">inline</span>: <span class="hljs-literal">false</span>,\n                },\n                {\n                    <span class="hljs-attr">name</span>: <span class="hljs-string">&#39;User ID:&#39;</span>,\n                    <span class="hljs-attr">value</span>: <span class="hljs-string">`\\`<span class="hljs-subst">${user.id}</span>\\``</span>,\n                    <span class="hljs-attr">inline</span>: <span class="hljs-literal">false</span>,\n                },\n                {\n                    <span class="hljs-attr">name</span>: <span class="hljs-string">&#39;Roles:&#39;</span>,\n                    <span class="hljs-attr">value</span>: <span class="hljs-string">&#39;&lt;@&amp;&#39;</span> + member.roles.map(<span class="hljs-function">(<span class="hljs-params">r</span>) =&gt;</span> <span class="hljs-string">`<span class="hljs-subst">${r}</span>`</span>).join(<span class="hljs-string">&#39;&gt;, &lt;@&amp;&#39;</span>) + <span class="hljs-string">&#39;&gt;&#39;</span>,\n                    <span class="hljs-attr">inline</span>: <span class="hljs-literal">false</span>,\n                },\n                {\n                    <span class="hljs-attr">name</span>: <span class="hljs-string">&#39;Joined server at:&#39;</span>,\n                    <span class="hljs-attr">value</span>: <span class="hljs-string">`<span class="hljs-subst">${moment.utc(member.joinedAt).format(<span class="hljs-string">&#39;MMMM, Do YYYY, h:mm:ss a&#39;</span>)}</span>`</span>,\n                    <span class="hljs-attr">inline</span>: <span class="hljs-literal">false</span>,\n                },\n            ],\n            <span class="hljs-attr">footer</span>: {\n                <span class="hljs-attr">text</span>: today,\n            },\n        },\n    });\n});\n</code></pre><p>Create a file in <code>./commands</code>, and name it <code>whois.js</code>. Proceed to dump the above code into <code>whois.js</code>. You <em>MIGHT</em> have to run <em><code>npm i moment --save</code></em> to install the <code>moment</code> module.</p><p> Now, let me explain the code. As usual, we require the packages, create the command, and export it: </p><pre><code class="lang-js"><span class="hljs-keyword">const</span> { Command } = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#39;yuuko&#39;</span>);\n<span class="hljs-keyword">const</span> moment = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#39;moment&#39;</span>);\n<span class="hljs-built_in">module</span>.exports = <span class="hljs-keyword">new</span> Command(<span class="hljs-string">&#39;whois&#39;</span>, <span class="hljs-keyword">async</span> (message, args, context) =&gt; {\n  <span class="hljs-comment">// code here</span>\n});\n</code></pre><p>We will then check for arguments. If there are none, we stop the code (or it will return <code>undefined</code>):</p><pre><code class="lang-js"><span class="hljs-keyword">if</span> (!args[<span class="hljs-number">0</span>]) {\n    <span class="hljs-keyword">return</span> message.channel.createMessage(`${message.author.mention}, apologies! Please specify <span class="hljs-literal">a</span> particular member!`)<span class="hljs-comment">;</span>\n}\n</code></pre><p>We use <code>message.author.mention</code> to mention the message author.</p><p>We get the first user that is mentioned in the message, get the guild the message was sent in, and get the <code>member</code> object from the <code>guild</code> object:</p><pre><code class="lang-js"><span class="hljs-attribute">const user</span> = message.mentions[0];\n<span class="hljs-attribute">const guild</span> = message.channel.guild;\n<span class="hljs-attribute">const member</span> = await guild.members.get(user.id);\n</code></pre><p>After that, we proceed to send the embed message with the <code>member</code> and <code>user</code> information:</p><pre><code class="lang-js">message.channel.createMessage({\n        embed: {\n            title: `User information for ${user.username}#${user.discriminator}`,\n            thumbnail: {\n                url: user.avatarURL,\n            },\n            color: <span class="hljs-number">0x008000</span>,\n            fields: [\n                {\n                    name: <span class="hljs-string">&#39;Account created at:&#39;</span>,\n                    value: `${moment.utc(user.createdAt).format(<span class="hljs-string">&#39;MMMM, Do YYYY, h:mm:ss a&#39;</span>)}`,\n                    <span class="hljs-keyword">inline</span>: false,\n                },\n                {\n                    name: <span class="hljs-string">&#39;User ID:&#39;</span>,\n                    value: `\\`${user.id}\\``,\n                    <span class="hljs-keyword">inline</span>: false,\n                },\n                {\n                    name: <span class="hljs-string">&#39;Roles:&#39;</span>,\n                    value: <span class="hljs-string">&#39;&lt;@&amp;&#39;</span> + member.roles.map((r) =&gt; `${r}`).join(<span class="hljs-string">&#39;&gt;, &lt;@&amp;&#39;</span>) + <span class="hljs-string">&#39;&gt;&#39;</span>,\n                    <span class="hljs-keyword">inline</span>: false,\n                },\n                {\n                    name: <span class="hljs-string">&#39;Joined server at:&#39;</span>,\n                    value: `${moment.utc(member.joinedAt).format(<span class="hljs-string">&#39;MMMM, Do YYYY, h:mm:ss a&#39;</span>)}`,\n                    <span class="hljs-keyword">inline</span>: false,\n                },\n            ],\n        },\n    });\n</code></pre><p> However, what if you wanted this command the have two triggers (e.g. <code>whois</code> and <code>member</code>) instead of just one trigger(<code>whois</code>)? That&#39;s quite easy. You just have to replace <code>module.exports = new Command(&#39;whois&#39;, async (message, args, context) =&gt;</code> with <code>module.exports = new Command([&#39;whois&#39;, &#39;member&#39;], async (message, args, context) =&gt;</code></p><p>This are just some <code>user</code> and <code>member</code> properties, more of them can found at the following pages:</p><ul><li><a href="https://abal.moe/Eris/docs/Member">Member</a></li><li><a href="https://abal.moe/Eris/docs/User">User</a></li></ul><h1 id="conclusion"> Conclusion </h1><p> In this article, we learnt how to send more advanced embed with fields, create command aliases, and fetch members from the guild objects. In my next post, I will be making a <code>guild</code> command that shows information about the guild the message was sent in. Have a nice day! </p></div>',1);function r(s,n,a,r,o,p){return Object(e["i"])(),Object(e["d"])("div",t,[l])}var o={name:"About"};a("7532");o.render=r;var p=o;Object(e["c"])(p).mount("#app")}});
//# sourceMappingURL=yuuko_partiii-legacy.15be3c0d.js.map